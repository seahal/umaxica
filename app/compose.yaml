name: 'app'
services:
  kafka:
    image: confluentinc/cp-kafka:7.7.0
    ports:
      - "9092:9092"
    networks:
      - backend
    environment:
      CLUSTER_ID: kafka-docker-cluster-1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_BROKER_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9093
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_AUTHORIZER_CLASS_NAME: org.apache.kafka.metadata.authorizer.StandardAuthorizer
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.0.0
#    networks:
#      - backend
#    ports:
#      - 9200:9200
#    environment:
#      - discovery.type=single-node
#      - xpack.security.enabled=false
#      - ELASTIC_PASSWORD=password
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - elasticsearch-data-1:/usr/share/elasticsearch/config/certs
  # db-psql-writer:
  #   image: postgres:16.6
  #   command: -c 'config_file=/etc/postgresql/postgresql.conf' -c 'hba_file=/etc/postgresql/pg_hba.conf'
  #   networks:
  #     - backend
  #   environment:
  #     POSTGRES_USER: default
  #     POSTGRES_PASSWORD: password
  #     TZ: UTC
  #     PGTZ: UTC
  #     POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
  #     POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - ./docker/db-psql-writer/init.sh:/docker-entrypoint-initdb.d/init.sh
  #     - ./docker/db-psql-writer/postgresql.conf:/etc/postgresql/postgresql.conf
  #     - ./docker/db-psql-writer/pg_hba.conf:/etc/postgresql/pg_hba.conf
  #   tmpfs:
  #     - /var/lib/postgresql/data
  #   restart: always
  # db-psql-reader:
  #   image: postgres:16.6
  #   networks:
  #     - backend
  #   environment:
  #     POSTGRES_USER: default
  #     POSTGRES_PASSWORD: password
  #     TZ: UTC
  #     PGTZ: UTC
  #   entrypoint: /entrypoint.sh
  #   ports:
  #     - "5433:5432"
  #   depends_on:
  #     - db-psql-writer
  #   volumes:
  #     - ./docker/db-psql-reader/entrypoint.sh:/entrypoint.sh
  #     - ./docker/db-psql-reader/postgresql.conf:/etc/postgresql/postgresql.conf
  #     - ./docker/db-psql-reader/pg_hba.conf:/etc/postgresql/pg_hba.conf
  #   tmpfs:
  #     - /var/lib/postgresql/data
  psql-auth-pub:
    image: postgres:16.6
    networks:
      - backend
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: password
      TZ: UTC
    ports:
      - "5433:5432"
    volumes:
      - psql-auth-pub-volume:/var/lib/postgresql/data
      # - ./docker/psql-auth-pub/init.sh:/docker-entrypoint-initdb.d/init.sh
      # - ./docker/psql-auth-pub/postgresql.conf:/etc/postgresql/postgresql.conf
      # - ./docker/psql-auth-pub/pg_hba.conf:/etc/postgresql/pg_hba.conf
    tmpfs:
      - /var/lib/postgresql/data
  psql-auth-sub:
    image: postgres:16.6
    networks:
      - backend
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: password
      TZ: UTC
    ports:
      - "5434:5432"
    volumes:
      -  psql-auth-sub-volume:/var/lib/postgresql/data
      # - ./docker/psql-auth-sub/init.sh:/docker-entrypoint-initdb.d/init.sh
      # - ./docker/psql-auth-sub/postgresql.conf:/etc/postgresql/postgresql.conf
      # - ./docker/psql-auth-sub/pg_hba.conf:/etc/postgresql/pg_hba.conf
    tmpfs:
      - /var/lib/postgresql/data
  psql-core-pub:
    image: postgres:16.6
    networks:
      - backend
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: password
      TZ: UTC
    ports:
      - "5435:5432"
    volumes:
      -   psql-core-pub-volume:/var/lib/postgresql/data
      # - ./docker/psql-core-pub/init.sh:/docker-entrypoint-initdb.d/init.sh
      # - ./docker/psql-core-pub/postgresql.conf:/etc/postgresql/postgresql.conf
      # - ./docker/psql-core-pub/pg_hba.conf:/etc/postgresql/pg_hba.conf
    tmpfs:
      - /var/lib/postgresql/data
  psql-core-sub:
    image: postgres:16.6
    volumes:
      - psql-core-sub-volume:/var/lib/postgresql/data
      # - ./docker/psql-core-sub/init.sh:/docker-entrypoint-initdb.d/init.sh
      # - ./docker/psql-core-sub/postgresql.conf:/etc/postgresql/postgresql.conf
      # - ./docker/psql-core-sub/pg_hba.conf:/etc/postgresql/pg_hba.conf
    networks:
      - backend
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: password
      TZ: UTC
    ports:
      - "5436:5432"
    tmpfs:
      - /var/lib/postgresql/data
  minio:
    image: minio/minio:RELEASE.2023-07-11T21-29-34Z
    volumes:
      - minio-data-1:/data
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
    environment:
      MINIO_ROOT_USER: default
      MINIO_ROOT_PASSWORD: password
      MINIO_DEFAULT_BUCKETS: application
  redis:
    image: redis:7.0.15-alpine3.20
    networks:
      - backend
    ports:
      - "6379:6379"
    volumes:
      - redis_volume:/data
  valkey:
    image: 'valkey/valkey:7.2.6-alpine'
    volumes:
      - valkey_volume:/data
    command: valkey-server
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    ports:
      - '6380:6379'
#   ror:
#     build:
#       context: ror/
#       target: development
#     command:  bundle exec rails s -p 3000 -b 0.0.0.0
#     restart: always
#     user: "1000:1000"
#     tty: true
#     stdin_open: true
#     ports:
#       - "3333:3000"
#     volumes:
#       - ./ror:/ror
#     networks:
#       - backend
#     depends_on:
# #      - db-psql-reader
#       - db-psql-writer
#       - redis
#       - valkey
#       - minio
#  remix:
#    build:
#      context: remix/.devcontainer/
#      target: development
#    command: bash -c "bun run dev"
#    restart: always # コンテナが停止すると常に再起動
#    tty: true
#    stdin_open: true
#    ports:
#      - '4000:4000'
#      - "5173:5173"
#      - "8002:8002"
#    networks:
#      - frontend
#    volumes:
#      - ./remix:/remix
#    depends_on:
#      - ror
  # selenium:
  #   image: seleniarm/standalone-chromium
  #   restart: always # コンテナが停止すると常に再起動
  #   networks:
  #     - backend
  #     - frontend
  #   ports:
  #     - "4444:4444"
  #     - "5900:5900"
  #     - "7900:7900"
  #   depends_on:
  #     - ror
volumes: #
  postgres_volume_writer:
  postgres_volume_reader:
  psql-auth-pub-volume:
  psql-auth-sub-volume:
  psql-core-pub-volume:
  psql-core-sub-volume:
  redis_volume:
  valkey_volume:
  elasticsearch-data-1:
  minio-data-1:
networks:
  backend:
  frontend:
